var searchIndex = {};
searchIndex['nix'] = {"items":[[0,"","nix","Rust friendly bindings to the various *nix system functions.",null,null],[6,"c_int","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"NixError","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[5,"from_ffi","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"eq","","",1,{"inputs":[{"name":"nixerror"},{"name":"nixerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"nixerror"},{"name":"nixerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"nixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"nixerror"}],"output":{"name":"nixerror"}}],[11,"last","","",1,{"inputs":[{"name":"nixerror"}],"output":{"name":"nixerror"}}],[11,"invalid_argument","","",1,{"inputs":[{"name":"nixerror"}],"output":{"name":"nixerror"}}],[11,"errno","","",1,{"inputs":[{"name":"nixerror"}],"output":{"name":"errno"}}],[11,"with_nix_path","std::path","",2,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"with_nix_path","","",3,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[0,"errno","nix","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",4,null],[13,"EPERM","","",4,null],[13,"ENOENT","","",4,null],[13,"ESRCH","","",4,null],[13,"EINTR","","",4,null],[13,"EIO","","",4,null],[13,"ENXIO","","",4,null],[13,"E2BIG","","",4,null],[13,"ENOEXEC","","",4,null],[13,"EBADF","","",4,null],[13,"ECHILD","","",4,null],[13,"EAGAIN","","",4,null],[13,"ENOMEM","","",4,null],[13,"EACCES","","",4,null],[13,"EFAULT","","",4,null],[13,"ENOTBLK","","",4,null],[13,"EBUSY","","",4,null],[13,"EEXIST","","",4,null],[13,"EXDEV","","",4,null],[13,"ENODEV","","",4,null],[13,"ENOTDIR","","",4,null],[13,"EISDIR","","",4,null],[13,"EINVAL","","",4,null],[13,"ENFILE","","",4,null],[13,"EMFILE","","",4,null],[13,"ENOTTY","","",4,null],[13,"ETXTBSY","","",4,null],[13,"EFBIG","","",4,null],[13,"ENOSPC","","",4,null],[13,"ESPIPE","","",4,null],[13,"EROFS","","",4,null],[13,"EMLINK","","",4,null],[13,"EPIPE","","",4,null],[13,"EDOM","","",4,null],[13,"ERANGE","","",4,null],[13,"EDEADLK","","",4,null],[13,"ENAMETOOLONG","","",4,null],[13,"ENOLCK","","",4,null],[13,"ENOSYS","","",4,null],[13,"ENOTEMPTY","","",4,null],[13,"ELOOP","","",4,null],[13,"ENOMSG","","",4,null],[13,"EIDRM","","",4,null],[13,"ECHRNG","","",4,null],[13,"EL2NSYNC","","",4,null],[13,"EL3HLT","","",4,null],[13,"EL3RST","","",4,null],[13,"ELNRNG","","",4,null],[13,"EUNATCH","","",4,null],[13,"ENOCSI","","",4,null],[13,"EL2HLT","","",4,null],[13,"EBADE","","",4,null],[13,"EBADR","","",4,null],[13,"EXFULL","","",4,null],[13,"ENOANO","","",4,null],[13,"EBADRQC","","",4,null],[13,"EBADSLT","","",4,null],[13,"EBFONT","","",4,null],[13,"ENOSTR","","",4,null],[13,"ENODATA","","",4,null],[13,"ETIME","","",4,null],[13,"ENOSR","","",4,null],[13,"ENONET","","",4,null],[13,"ENOPKG","","",4,null],[13,"EREMOTE","","",4,null],[13,"ENOLINK","","",4,null],[13,"EADV","","",4,null],[13,"ESRMNT","","",4,null],[13,"ECOMM","","",4,null],[13,"EPROTO","","",4,null],[13,"EMULTIHOP","","",4,null],[13,"EDOTDOT","","",4,null],[13,"EBADMSG","","",4,null],[13,"EOVERFLOW","","",4,null],[13,"ENOTUNIQ","","",4,null],[13,"EBADFD","","",4,null],[13,"EREMCHG","","",4,null],[13,"ELIBACC","","",4,null],[13,"ELIBBAD","","",4,null],[13,"ELIBSCN","","",4,null],[13,"ELIBMAX","","",4,null],[13,"ELIBEXEC","","",4,null],[13,"EILSEQ","","",4,null],[13,"ERESTART","","",4,null],[13,"ESTRPIPE","","",4,null],[13,"EUSERS","","",4,null],[13,"ENOTSOCK","","",4,null],[13,"EDESTADDRREQ","","",4,null],[13,"EMSGSIZE","","",4,null],[13,"EPROTOTYPE","","",4,null],[13,"ENOPROTOOPT","","",4,null],[13,"EPROTONOSUPPORT","","",4,null],[13,"ESOCKTNOSUPPORT","","",4,null],[13,"EOPNOTSUPP","","",4,null],[13,"EPFNOSUPPORT","","",4,null],[13,"EAFNOSUPPORT","","",4,null],[13,"EADDRINUSE","","",4,null],[13,"EADDRNOTAVAIL","","",4,null],[13,"ENETDOWN","","",4,null],[13,"ENETUNREACH","","",4,null],[13,"ENETRESET","","",4,null],[13,"ECONNABORTED","","",4,null],[13,"ECONNRESET","","",4,null],[13,"ENOBUFS","","",4,null],[13,"EISCONN","","",4,null],[13,"ENOTCONN","","",4,null],[13,"ESHUTDOWN","","",4,null],[13,"ETOOMANYREFS","","",4,null],[13,"ETIMEDOUT","","",4,null],[13,"ECONNREFUSED","","",4,null],[13,"EHOSTDOWN","","",4,null],[13,"EHOSTUNREACH","","",4,null],[13,"EALREADY","","",4,null],[13,"EINPROGRESS","","",4,null],[13,"ESTALE","","",4,null],[13,"EUCLEAN","","",4,null],[13,"ENOTNAM","","",4,null],[13,"ENAVAIL","","",4,null],[13,"EISNAM","","",4,null],[13,"EREMOTEIO","","",4,null],[13,"EDQUOT","","",4,null],[13,"ENOMEDIUM","","",4,null],[13,"EMEDIUMTYPE","","",4,null],[13,"ECANCELED","","",4,null],[13,"ENOKEY","","",4,null],[13,"EKEYEXPIRED","","",4,null],[13,"EKEYREVOKED","","",4,null],[13,"EKEYREJECTED","","",4,null],[13,"EOWNERDEAD","","",4,null],[13,"ENOTRECOVERABLE","","",4,null],[13,"ERFKILL","","",4,null],[13,"EHWPOISON","","",4,null],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"from_i64","","",4,{"inputs":[{"name":"errno"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"errno"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",4,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[11,"from_i64","","",4,{"inputs":[{"name":"errno"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"errno"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",4,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",4,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",5,null],[12,"l_whence","","",5,null],[12,"l_start","","",5,null],[12,"l_len","","",5,null],[12,"l_pid","","",5,null],[12,"l_sysid","","",5,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",6,null],[13,"F_DUPFD_CLOEXEC","","",6,null],[13,"F_GETFD","","",6,null],[13,"F_SETFD","","",6,null],[13,"F_GETFL","","",6,null],[13,"F_SETFL","","",6,null],[13,"F_SETLK","","",6,null],[13,"F_SETLKW","","",6,null],[13,"F_GETLK","","",6,null],[13,"F_OFD_SETLK","","",6,null],[13,"F_OFD_SETLKW","","",6,null],[13,"F_OFD_GETLK","","",6,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"nixresult"}}],[5,"fcntl","","",null,{"inputs":[{"name":"fd"},{"name":"fcntlarg"}],"output":{"name":"nixresult"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",7,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Fd","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",7,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"nixresult"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"nixresult"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETATCH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"msflags"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"msflags"},{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"mntflags"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10,{"inputs":[{"name":"mntflags"},{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[0,"sched","nix","",null,null],[3,"CpuSet","nix::sched","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"nixresult"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"nixresult"}}],[6,"CloneFlags","","",null,null],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[7,"CLONE_VM","","",null,null],[7,"CLONE_FS","","",null,null],[7,"CLONE_FILES","","",null,null],[7,"CLONE_SIGHAND","","",null,null],[7,"CLONE_PTRACE","","",null,null],[7,"CLONE_VFORK","","",null,null],[7,"CLONE_PARENT","","",null,null],[7,"CLONE_THREAD","","",null,null],[7,"CLONE_NEWNS","","",null,null],[7,"CLONE_SYSVSEM","","",null,null],[7,"CLONE_SETTLS","","",null,null],[7,"CLONE_PARENT_SETTID","","",null,null],[7,"CLONE_CHILD_CLEARTID","","",null,null],[7,"CLONE_DETACHED","","",null,null],[7,"CLONE_UNTRACED","","",null,null],[7,"CLONE_CHILD_SETTID","","",null,null],[7,"CLONE_NEWUTS","","",null,null],[7,"CLONE_NEWIPC","","",null,null],[7,"CLONE_NEWUSER","","",null,null],[7,"CLONE_NEWPID","","",null,null],[7,"CLONE_NEWNET","","",null,null],[7,"CLONE_IO","","",null,null],[11,"new","","",11,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"set","","",11,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[11,"unset","","",11,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",12,null],[12,"data","","",12,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",13,null],[13,"EpollCtlDel","","",13,null],[13,"EpollCtlMod","","",13,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"nixresult"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"fd"},{"name":"epollop"},{"name":"fd"},{"name":"epollevent"}],"output":{"name":"nixresult"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",14,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"fmt","","",14,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"eventfd","nix::sys","",null,null],[3,"EventFdFlag","nix::sys::eventfd","",null,null],[5,"eventfd","","",null,{"inputs":[{"name":"usize"},{"name":"eventfdflag"}],"output":{"name":"nixresult"}}],[17,"EFD_CLOEXEC","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[11,"hash","","",15,null],[11,"cmp","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"eq","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"eventfdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",15,{"inputs":[{"name":"eventfdflag"},{"name":"c_int"}],"output":{"name":"eventfdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",15,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",15,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[0,"ioctl","nix::sys","",null,null],[3,"Winsize","nix::sys::ioctl","",null,null],[12,"ws_row","","",16,null],[12,"ws_col","","",16,null],[12,"ws_xpixel","","",16,null],[12,"ws_ypixel","","",16,null],[4,"IoctlArg","","",null,null],[13,"TIOCGWINSZ","","",17,null],[5,"ioctl","","",null,{"inputs":[{"name":"fd"},{"name":"ioctlarg"}],"output":{"name":"nixresult"}}],[11,"fmt","","",16,{"inputs":[{"name":"winsize"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"nixresult"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"nixresult"}}],[0,"signal","","",null,null],[3,"SockFlag","nix::sys::signal::signal","",null,null],[3,"siginfo","","",null,null],[12,"pid","","",18,null],[12,"uid","","",18,null],[12,"status","","",18,null],[3,"sigaction","","",null,null],[12,"sa_handler","","",19,null],[12,"sa_mask","","",19,null],[12,"sa_flags","","",19,null],[3,"sigset_t","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGUNUSED","","",null,null],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"sockflag"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"sockflag"},{"name":"c_ulong"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"SigNum","nix::sys::signal","",null,null],[17,"SIGEMT","","",null,null],[11,"empty","","",21,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",21,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"nixresult"}}],[11,"remove","","",21,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"nixresult"}}],[11,"new","","",22,null],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",23,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",24,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",25,null],[12,"sa_data","","",25,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",26,null],[12,"sin_port","","",26,null],[12,"sin_addr","","",26,null],[12,"sin_zero","","",26,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",27,null],[12,"sin6_port","","",27,null],[12,"sin6_flowinfo","","",27,null],[12,"sin6_addr","","",27,null],[12,"sin6_scope_id","","",27,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",28,null],[12,"sun_path","","",28,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",29,null],[12,"__ss_align","","",29,null],[12,"__ss_pad2","","",29,null],[3,"UnixAddr","","",null,null],[3,"Ipv4Addr","","",null,null],[3,"Ipv6Addr","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",30,null],[12,"imr_interface","","",30,null],[3,"SockFlag","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",31,null],[12,"l_linger","","",31,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",32,null],[13,"Inet","","",32,null],[13,"Inet6","","",32,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",33,null],[13,"Unix","","",33,null],[4,"InetAddr","","",null,null],[13,"V4","","",34,null],[13,"V6","","",34,null],[4,"IpAddr","","",null,null],[13,"V4","","",35,null],[13,"V6","","",35,null],[4,"SockType","","",null,null],[13,"Stream","","",36,null],[13,"Datagram","","",36,null],[13,"SeqPacket","","",36,null],[13,"Raw","","",36,null],[13,"Rdm","","",36,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",37,null],[13,"Tcp","","",37,null],[13,"Ip","","",37,null],[13,"Ipv6","","",37,null],[13,"Udp","","",37,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"}],"output":{"name":"nixresult"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"fd"},{"name":"usize"}],"output":{"name":"nixresult"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"fd"},{"name":"sockaddr"}],"output":{"name":"nixresult"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"fd"},{"name":"sockflag"}],"output":{"name":"nixresult"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"fd"},{"name":"sockaddr"}],"output":{"name":"nixresult"}}],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"fd"},{"name":"socklevel"},{"name":"o"}],"output":{"name":"nixresult"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"fd"},{"name":"socklevel"},{"name":"o"},{"name":"set"}],"output":{"name":"nixresult"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"nixresult"}}],[11,"from_i64","","",32,{"inputs":[{"name":"addressfamily"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",32,{"inputs":[{"name":"addressfamily"},{"name":"u64"}],"output":{"name":"option"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",34,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",34,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",34,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",34,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",34,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",35,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",35,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"from_std","","",35,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"to_std","","",35,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",35,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",38,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",38,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",38,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",38,null],[11,"to_std","","",38,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",38,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",38,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",38,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",39,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",39,null],[11,"to_std","","",39,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",39,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",40,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"nixresult"}}],[11,"path","","",40,{"inputs":[{"name":"unixaddr"}],"output":{"name":"path"}}],[11,"eq","","",40,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",40,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",40,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",33,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",33,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"nixresult"}}],[11,"family","","",33,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",33,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",33,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",33,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",30,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[11,"fmt","","",41,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",41,{"inputs":[{"name":"reuseaddr"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",41,{"inputs":[{"name":"reuseaddr"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"nixresult"}}],[11,"fmt","","",42,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",42,{"inputs":[{"name":"reuseport"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",42,{"inputs":[{"name":"reuseport"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"nixresult"}}],[11,"fmt","","",43,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",43,{"inputs":[{"name":"tcpnodelay"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",43,{"inputs":[{"name":"tcpnodelay"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"nixresult"}}],[11,"fmt","","",44,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",44,{"inputs":[{"name":"linger"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",44,{"inputs":[{"name":"linger"},{"name":"fd"},{"name":"c_int"},{"name":"linger"}],"output":{"name":"nixresult"}}],[11,"fmt","","",45,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",45,{"inputs":[{"name":"ipaddmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",45,{"inputs":[{"name":"ipaddmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ip_mreq"}],"output":{"name":"nixresult"}}],[11,"fmt","","",46,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",46,{"inputs":[{"name":"ipdropmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",46,{"inputs":[{"name":"ipdropmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ip_mreq"}],"output":{"name":"nixresult"}}],[11,"fmt","","",47,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",47,{"inputs":[{"name":"ipmulticastttl"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",47,{"inputs":[{"name":"ipmulticastttl"},{"name":"fd"},{"name":"c_int"},{"name":"u8"}],"output":{"name":"nixresult"}}],[11,"fmt","","",48,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",48,{"inputs":[{"name":"receivetimeout"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",48,{"inputs":[{"name":"receivetimeout"},{"name":"fd"},{"name":"c_int"},{"name":"timeval"}],"output":{"name":"nixresult"}}],[11,"fmt","","",49,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",49,{"inputs":[{"name":"sendtimeout"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",49,{"inputs":[{"name":"sendtimeout"},{"name":"fd"},{"name":"c_int"},{"name":"timeval"}],"output":{"name":"nixresult"}}],[11,"fmt","","",50,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Get","","",null,null],[6,"Set","","",null,null],[11,"get","","",50,{"inputs":[{"name":"broadcast"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"set","","",50,{"inputs":[{"name":"broadcast"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"nixresult"}}],[17,"SOCK_NONBLOCK","nix::sys::socket","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"SockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt` and `setsockopt`.",null,null],[16,"Get","nix::sys::socket::SockOpt","Type of `getsockopt` return value",null,null],[16,"Set","","Type of value used to set the socket option. Used as the argument to\n`setsockopt`.",null,null],[11,"from_i64","nix::sys::socket","",36,{"inputs":[{"name":"socktype"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",36,{"inputs":[{"name":"socktype"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",36,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"cmp","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",51,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",51,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",51,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"fmt","","",31,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",52,null],[12,"st_ino","","",52,null],[12,"st_nlink","","",52,null],[12,"st_mode","","",52,null],[12,"st_uid","","",52,null],[12,"st_gid","","",52,null],[12,"__pad0","","",52,null],[12,"st_rdev","","",52,null],[12,"st_size","","",52,null],[12,"st_blksize","","",52,null],[12,"st_blocks","","",52,null],[12,"st_atime","","",52,null],[12,"st_atime_nsec","","",52,null],[12,"st_mtime","","",52,null],[12,"st_mtime_nsec","","",52,null],[12,"st_ctime","","",52,null],[12,"st_ctime_nsec","","",52,null],[12,"__unused","","",52,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"nixresult"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"nixresult"}}],[5,"fstat","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",53,null],[11,"cmp","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",53,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",53,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",53,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",53,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"hash","","",54,null],[11,"cmp","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",54,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",54,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",54,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",54,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"fmt","","",53,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"syscall","nix::sys","Indirect system call\n",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",55,null],[12,"c_oflag","","",55,null],[12,"c_cflag","","",55,null],[12,"c_lflag","","",55,null],[12,"c_line","","",55,null],[12,"c_cc","","",55,null],[12,"c_ispeed","","",55,null],[12,"c_ospeed","","",55,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",56,null],[13,"TCSADRAIN","","",56,null],[13,"TCSAFLUSH","","",56,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",57,null],[13,"TCOFLUSH","","",57,null],[13,"TCIOFLUSH","","",57,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",58,null],[13,"TCOON","","",58,null],[13,"TCIOFF","","",58,null],[13,"TCION","","",58,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"nixresult"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"nixresult"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"fd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"nixresult"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"tcflow","","",null,{"inputs":[{"name":"fd"},{"name":"flowarg"}],"output":{"name":"nixresult"}}],[5,"tcflush","","",null,{"inputs":[{"name":"fd"},{"name":"flusharg"}],"output":{"name":"nixresult"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"fd"},{"name":"c_int"}],"output":{"name":"nixresult"}}],[11,"hash","","",59,null],[11,"cmp","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",59,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",60,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"hash","","",61,null],[11,"cmp","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",61,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"hash","","",62,null],[11,"cmp","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",62,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[11,"hash","","",59,null],[11,"cmp","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",59,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",60,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"hash","","",61,null],[11,"cmp","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",61,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"hash","","",62,null],[11,"cmp","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",62,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"sysname","","",63,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",63,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",63,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",63,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",63,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",64,null],[13,"StillAlive","","",64,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"nixresult"}}],[17,"WNOHANG","","",null,null],[11,"hash","","",65,null],[11,"cmp","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",65,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",65,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",65,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",65,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[0,"mman","nix::sys","",null,null],[5,"mlock","nix::sys::mman","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"nixresult"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"nixresult"}}],[6,"MmapFlag","","",null,null],[6,"MmapProt","","",null,null],[6,"MmapAdvise","","",null,null],[6,"MmapSync","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MAP_FAILED","","",null,null],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[11,"as_slice","","",66,null],[11,"from_slice","","",66,null],[11,"from_mut_slice","","",66,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",67,null],[12,"tv_usec","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",67,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",67,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",67,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",67,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",67,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[6,"Output","","",null,null],[11,"neg","","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"add","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"sub","","",67,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"mul","","",67,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"div","","",67,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",67,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unistd","nix","Standard symbolic constants and types\n",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",68,null],[13,"Child","","",68,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"nixresult"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"nixresult"}}],[5,"dup","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"dup2","","",null,{"inputs":[{"name":"fd"},{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"dup3","","",null,{"inputs":[{"name":"fd"},{"name":"fd"},{"name":"oflag"}],"output":{"name":"nixresult"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"nixresult"}}],[5,"execve","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"nixresult"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"nixresult"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"nixresult"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"fd"},{"name":"off_t"}],"output":{"name":"nixresult"}}],[5,"isatty","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"nixresult"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"nixresult"}}],[11,"is_child","","",68,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",68,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"NixResult","nix","",null,null],[8,"NixPath","","",null,null],[10,"with_nix_path","","",69,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[4,"c_void"],[4,"NixError"],[3,"Path"],[3,"PathBuf"],[4,"Errno"],[3,"flock"],[4,"FcntlArg"],[3,"OFlag"],[3,"FdFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"EventFdFlag"],[3,"Winsize"],[4,"IoctlArg"],[3,"siginfo"],[3,"sigaction"],[3,"SockFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"ip_mreq"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockLevel"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"IpMulticastTtl"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"SockFlag"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[4,"Fork"],[8,"NixPath"]]};
initSearch(searchIndex);
