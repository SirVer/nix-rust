var searchIndex = {};
searchIndex['nix'] = {"items":[[0,"","nix","Rust friendly bindings to the various *nix system functions.",null,null],[11,"clone","libc::types::os::common::posix01","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",16,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",19,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[6,"c_int","nix","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",20,null],[13,"__variant2","","",20,null],[4,"Error","","",null,null],[13,"Sys","","",21,null],[13,"InvalidPath","","",21,null],[5,"from_ffi","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",22,null],[13,"EPERM","","",22,null],[13,"ENOENT","","",22,null],[13,"ESRCH","","",22,null],[13,"EINTR","","",22,null],[13,"EIO","","",22,null],[13,"ENXIO","","",22,null],[13,"E2BIG","","",22,null],[13,"ENOEXEC","","",22,null],[13,"EBADF","","",22,null],[13,"ECHILD","","",22,null],[13,"EDEADLK","","",22,null],[13,"ENOMEM","","",22,null],[13,"EACCES","","",22,null],[13,"EFAULT","","",22,null],[13,"ENOTBLK","","",22,null],[13,"EBUSY","","",22,null],[13,"EEXIST","","",22,null],[13,"EXDEV","","",22,null],[13,"ENODEV","","",22,null],[13,"ENOTDIR","","",22,null],[13,"EISDIR","","",22,null],[13,"EINVAL","","",22,null],[13,"ENFILE","","",22,null],[13,"EMFILE","","",22,null],[13,"ENOTTY","","",22,null],[13,"ETXTBSY","","",22,null],[13,"EFBIG","","",22,null],[13,"ENOSPC","","",22,null],[13,"ESPIPE","","",22,null],[13,"EROFS","","",22,null],[13,"EMLINK","","",22,null],[13,"EPIPE","","",22,null],[13,"EDOM","","",22,null],[13,"ERANGE","","",22,null],[13,"EAGAIN","","",22,null],[13,"EINPROGRESS","","",22,null],[13,"EALREADY","","",22,null],[13,"ENOTSOCK","","",22,null],[13,"EDESTADDRREQ","","",22,null],[13,"EMSGSIZE","","",22,null],[13,"EPROTOTYPE","","",22,null],[13,"ENOPROTOOPT","","",22,null],[13,"EPROTONOSUPPORT","","",22,null],[13,"ESOCKTNOSUPPORT","","",22,null],[13,"ENOTSUP","","",22,null],[13,"EPFNOSUPPORT","","",22,null],[13,"EAFNOSUPPORT","","",22,null],[13,"EADDRINUSE","","",22,null],[13,"EADDRNOTAVAIL","","",22,null],[13,"ENETDOWN","","",22,null],[13,"ENETUNREACH","","",22,null],[13,"ENETRESET","","",22,null],[13,"ECONNABORTED","","",22,null],[13,"ECONNRESET","","",22,null],[13,"ENOBUFS","","",22,null],[13,"EISCONN","","",22,null],[13,"ENOTCONN","","",22,null],[13,"ESHUTDOWN","","",22,null],[13,"ETOOMANYREFS","","",22,null],[13,"ETIMEDOUT","","",22,null],[13,"ECONNREFUSED","","",22,null],[13,"ELOOP","","",22,null],[13,"ENAMETOOLONG","","",22,null],[13,"EHOSTDOWN","","",22,null],[13,"EHOSTUNREACH","","",22,null],[13,"ENOTEMPTY","","",22,null],[13,"EPROCLIM","","",22,null],[13,"EUSERS","","",22,null],[13,"EDQUOT","","",22,null],[13,"ESTALE","","",22,null],[13,"EREMOTE","","",22,null],[13,"EBADRPC","","",22,null],[13,"ERPCMISMATCH","","",22,null],[13,"EPROGUNAVAIL","","",22,null],[13,"EPROGMISMATCH","","",22,null],[13,"EPROCUNAVAIL","","",22,null],[13,"ENOLCK","","",22,null],[13,"ENOSYS","","",22,null],[13,"EFTYPE","","",22,null],[13,"EAUTH","","",22,null],[13,"ENEEDAUTH","","",22,null],[13,"EPWROFF","","",22,null],[13,"EDEVERR","","",22,null],[13,"EOVERFLOW","","",22,null],[13,"EBADEXEC","","",22,null],[13,"EBADARCH","","",22,null],[13,"ESHLIBVERS","","",22,null],[13,"EBADMACHO","","",22,null],[13,"ECANCELED","","",22,null],[13,"EIDRM","","",22,null],[13,"ENOMSG","","",22,null],[13,"EILSEQ","","",22,null],[13,"ENOATTR","","",22,null],[13,"EBADMSG","","",22,null],[13,"EMULTIHOP","","",22,null],[13,"ENODATA","","",22,null],[13,"ENOLINK","","",22,null],[13,"ENOSR","","",22,null],[13,"ENOSTR","","",22,null],[13,"EPROTO","","",22,null],[13,"ETIME","","",22,null],[13,"EOPNOTSUPP","","",22,null],[13,"ENOPOLICY","","",22,null],[13,"ENOTRECOVERABLE","","",22,null],[13,"EOWNERDEAD","","",22,null],[13,"EQFULL","","",22,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","","",22,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",22,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",22,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",22,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",22,{"inputs":[{"name":"errno"},{"name":"i32"}],"output":{"name":"errno"}}],[17,"ELAST","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"flock","","",null,null],[12,"l_start","","",23,null],[12,"l_len","","",23,null],[12,"l_pid","","",23,null],[12,"l_type","","",23,null],[12,"l_whence","","",23,null],[12,"l_sysid","","",23,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",24,null],[13,"F_DUPFD_CLOEXEC","","",24,null],[13,"F_GETFD","","",24,null],[13,"F_SETFD","","",24,null],[13,"F_GETFL","","",24,null],[13,"F_SETFL","","",24,null],[13,"F_SETLK","","",24,null],[13,"F_SETLKW","","",24,null],[13,"F_GETLK","","",24,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"fd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","","",25,null],[11,"cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[6,"Fd","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_FSYNC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[0,"sys","nix","",null,null],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[12,"ident","","",27,null],[12,"filter","","",27,null],[12,"flags","","",27,null],[12,"fflags","","",27,null],[12,"data","","",27,null],[12,"udata","","",27,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_READ","","",28,null],[13,"EVFILT_WRITE","","",28,null],[13,"EVFILT_AIO","","",28,null],[13,"EVFILT_VNODE","","",28,null],[13,"EVFILT_PROC","","",28,null],[13,"EVFILT_SIGNAL","","",28,null],[13,"EVFILT_TIMER","","",28,null],[13,"EVFILT_MACHPORT","","",28,null],[13,"EVFILT_FS","","",28,null],[13,"EVFILT_USER","","",28,null],[13,"EVFILT_VM","","",28,null],[13,"EVFILT_SYSCOUNT","","",28,null],[5,"kqueue","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"kevent","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"usize"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_RESOURCEEND","","",null,null],[17,"NOTE_APPACTIVE","","",null,null],[17,"NOTE_APPBACKGROUND","","",null,null],[17,"NOTE_APPNONUI","","",null,null],[17,"NOTE_APPINACTIVE","","",null,null],[17,"NOTE_APPALLSTATES","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_OOBAND","","",null,null],[11,"eq","","",28,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"eventfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"eventfilter"}],"output":{"name":"eventfilter"}}],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"eq","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"fmt","","",29,{"inputs":[{"name":"eventflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"eq","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[3,"IoctlDirFlags","nix::sys::ioctl","",null,null],[5,"op","","Build an ioctl op with the provide parameters.  This is a helper\nfunction for IOCTLs in the Linux kernel using the newer conventions\nfor IOCTLs operations.  Many ioctls do not use this newer convention\nand the constants for those should just be used as-is.",null,{"inputs":[{"name":"ioctldirflags"},{"name":"u8"},{"name":"u8"},{"name":"usize"}],"output":{"name":"ioctl_op_t"}}],[5,"op_none","","Build an op indicating that the data pointer is not used.\nThat is, the command itself is sufficient.",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"ioctl_op_t"}}],[5,"op_read","","Build an op indicating that the data pointer will be populated\nwith data from the kernel",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"usize"}],"output":{"name":"ioctl_op_t"}}],[5,"op_write","","Build an op indicating that the data pointer contains data\nto be consumed by the kernel (and not written to).",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"usize"}],"output":{"name":"ioctl_op_t"}}],[5,"op_read_write","","Build an op indicating that the data pointer both contains\ndata to be consumed by the kernel and contains fields that\nwill be populated by the kernel.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"usize"}],"output":{"name":"ioctl_op_t"}}],[5,"read","","Ioctl call that is expected to return a result\nbut which does not take any additional arguments on the input side",null,{"inputs":[{"name":"fd"},{"name":"ioctl_op_t"}],"output":{"name":"result"}}],[5,"read_into","","Ioctl where the result from the kernel will be written to the\nprovided reference",null,{"inputs":[{"name":"fd"},{"name":"ioctl_op_t"},{"name":"t"}],"output":{"name":"result"}}],[5,"read_into_ptr","","Ioctl where the result from the kernel will be written to the\nprovided pointer",null,null],[5,"write","","Ioctl call that sends a value to the kernel but\ndoes not return anything (pure side effect).",null,{"inputs":[{"name":"fd"},{"name":"ioctl_op_t"},{"name":"t"}],"output":{"name":"result"}}],[5,"write_ptr","","Ioctl call that sends a value to the kernel but\ndoes not return anything (pure side effect).",null,null],[5,"execute","","Ioctl call for which no data pointer is provided to the kernel.\nThat is, the kernel has sufficient information about what to\ndo based on the op alone.",null,{"inputs":[{"name":"fd"},{"name":"ioctl_op_t"}],"output":{"name":"result"}}],[6,"ioctl_op_t","","",null,null],[17,"IOC_NONE","","/// Indicates that the ioctl data pointer is not used",null,null],[17,"IOC_WRITE","","/// Indicates that the ioctl data pointer contains data that\n/// will be consumed by the operating system",null,null],[17,"IOC_READ","","/// Indicates tha the ioctl data pointer contains data that\n/// will be populated by the operating system to be consumed\n/// by userspace",null,null],[11,"hash","","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"eq","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"u8"}],"output":{"name":"ioctldirflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[0,"signal","","",null,null],[3,"SockFlag","nix::sys::signal::signal","",null,null],[3,"siginfo","","",null,null],[12,"si_signo","","",32,null],[12,"si_errno","","",32,null],[12,"si_code","","",32,null],[12,"pid","","",32,null],[12,"uid","","",32,null],[12,"status","","",32,null],[3,"sigaction","","",null,null],[12,"sa_handler","","",33,null],[12,"sa_mask","","",33,null],[12,"sa_flags","","",33,null],[6,"sigset_t","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[11,"hash","","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"clone","","",32,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[6,"SigNum","nix::sys::signal","",null,null],[17,"SIGEMT","","",null,null],[11,"clone","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"empty","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",35,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",35,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"new","","",36,null],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",8,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",5,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",7,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",9,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",6,null],[12,"ss_family","","",6,null],[12,"__ss_pad1","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"UnixAddr","","",null,null],[3,"Ipv4Addr","","",null,null],[3,"Ipv6Addr","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",37,null],[12,"imr_interface","","",37,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",38,null],[12,"ipv6mr_interface","","",38,null],[3,"SockFlag","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",39,null],[12,"l_linger","","",39,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",40,null],[13,"Inet","","",40,null],[13,"Inet6","","",40,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",41,null],[13,"Unix","","",41,null],[4,"InetAddr","","",null,null],[13,"V4","","",42,null],[13,"V6","","",42,null],[4,"IpAddr","","",null,null],[13,"V4","","",43,null],[13,"V6","","",43,null],[4,"SockType","","",null,null],[13,"Stream","","",44,null],[13,"Datagram","","",44,null],[13,"SeqPacket","","",44,null],[13,"Raw","","",44,null],[13,"Rdm","","",44,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",45,null],[13,"Tcp","","",45,null],[13,"Ip","","",45,null],[13,"Ipv6","","",45,null],[13,"Udp","","",45,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",46,null],[13,"Write","","Further  transmissions will be disallowed.",46,null],[13,"Both","","Further receptions and transmissions will be disallowed.",46,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"fd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"fd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"fd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"fd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"fd"},{"name":"socklevel"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"fd"},{"name":"socklevel"},{"name":"o"},{"name":"o"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"fd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",42,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",42,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",42,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",42,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",42,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",42,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",42,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",42,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",42,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",43,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",43,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",43,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",47,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",47,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",47,null],[11,"to_std","","",47,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",47,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",47,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",47,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",48,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",48,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",48,null],[11,"to_std","","",48,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",48,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",49,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"path","","",49,{"inputs":[{"name":"unixaddr"}],"output":{"name":"path"}}],[11,"eq","","",49,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",49,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",49,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",41,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",41,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",41,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",41,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",41,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",41,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",37,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",38,{"inputs":[{"name":"ipv6_mreq"},{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[11,"fmt","","",50,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[6,"Val","","",null,null],[11,"get","","",50,{"inputs":[{"name":"reuseaddr"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",50,{"inputs":[{"name":"reuseaddr"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[6,"Val","","",null,null],[11,"get","","",51,{"inputs":[{"name":"reuseport"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",51,{"inputs":[{"name":"reuseport"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[6,"Val","","",null,null],[11,"get","","",52,{"inputs":[{"name":"tcpnodelay"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",52,{"inputs":[{"name":"tcpnodelay"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[6,"Val","","",null,null],[11,"get","","",53,{"inputs":[{"name":"linger"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",53,{"inputs":[{"name":"linger"},{"name":"fd"},{"name":"c_int"},{"name":"linger"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[6,"Val","","",null,null],[11,"get","","",54,{"inputs":[{"name":"ipaddmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",54,{"inputs":[{"name":"ipaddmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[6,"Val","","",null,null],[11,"get","","",55,{"inputs":[{"name":"ipdropmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",55,{"inputs":[{"name":"ipdropmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[6,"Val","","",null,null],[11,"get","","",56,{"inputs":[{"name":"ipv6addmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",56,{"inputs":[{"name":"ipv6addmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[6,"Val","","",null,null],[11,"get","","",57,{"inputs":[{"name":"ipv6dropmembership"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",57,{"inputs":[{"name":"ipv6dropmembership"},{"name":"fd"},{"name":"c_int"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[6,"Val","","",null,null],[11,"get","","",58,{"inputs":[{"name":"ipmulticastttl"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",58,{"inputs":[{"name":"ipmulticastttl"},{"name":"fd"},{"name":"c_int"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[6,"Val","","",null,null],[11,"get","","",59,{"inputs":[{"name":"ipmulticastloop"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",59,{"inputs":[{"name":"ipmulticastloop"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[6,"Val","","",null,null],[11,"get","","",60,{"inputs":[{"name":"receivetimeout"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",60,{"inputs":[{"name":"receivetimeout"},{"name":"fd"},{"name":"c_int"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[6,"Val","","",null,null],[11,"get","","",61,{"inputs":[{"name":"sendtimeout"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",61,{"inputs":[{"name":"sendtimeout"},{"name":"fd"},{"name":"c_int"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[6,"Val","","",null,null],[11,"get","","",62,{"inputs":[{"name":"broadcast"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",62,{"inputs":[{"name":"broadcast"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[6,"Val","","",null,null],[11,"get","","",63,{"inputs":[{"name":"oobinline"},{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"set","","",63,{"inputs":[{"name":"oobinline"},{"name":"fd"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[17,"IPV6_ADD_MEMBERSHIP","nix::sys::socket","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"SockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt` and `setsockopt`.",null,null],[16,"Val","","",64,null],[11,"fmt","","",44,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",65,null],[11,"cmp","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",65,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",65,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",65,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",65,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"fmt","","",39,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",46,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",16,null],[12,"st_mode","","",16,null],[12,"st_nlink","","",16,null],[12,"st_ino","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"st_rdev","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"st_birthtime","","",16,null],[12,"st_birthtime_nsec","","",16,null],[12,"st_size","","",16,null],[12,"st_blocks","","",16,null],[12,"st_blksize","","",16,null],[12,"st_flags","","",16,null],[12,"st_gen","","",16,null],[12,"st_lspare","","",16,null],[12,"st_qspare","","",16,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",66,null],[11,"cmp","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",66,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",66,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",66,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",66,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"hash","","",67,null],[11,"cmp","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",67,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",67,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",67,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",67,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",67,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",67,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",67,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",67,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",67,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"fmt","","",66,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",68,null],[12,"c_oflag","","",68,null],[12,"c_cflag","","",68,null],[12,"c_lflag","","",68,null],[12,"c_cc","","",68,null],[12,"c_ispeed","","",68,null],[12,"c_ospeed","","",68,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",69,null],[13,"TCSADRAIN","","",69,null],[13,"TCSAFLUSH","","",69,null],[13,"TCSASOFT","","",69,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",70,null],[13,"TCOFLUSH","","",70,null],[13,"TCIOFLUSH","","",70,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",71,null],[13,"TCOON","","",71,null],[13,"TCIOFF","","",71,null],[13,"TCION","","",71,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"fd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"fd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"fd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"fd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",72,null],[11,"cmp","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",72,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",72,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",72,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",72,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"hash","","",73,null],[11,"cmp","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",73,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",73,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",73,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",73,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"hash","","",74,null],[11,"cmp","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",74,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",74,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",74,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"hash","","",75,null],[11,"cmp","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",75,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",75,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"clone","","",69,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",70,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",71,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"MDMBUF","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"NL2","","",null,null],[17,"NL3","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",76,null],[13,"StillAlive","","",76,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[11,"hash","","",77,null],[11,"cmp","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",77,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",77,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"clone","","",76,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[0,"mman","nix::sys","",null,null],[5,"mlock","nix::sys::mman","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[6,"MmapFlag","","",null,null],[6,"MmapProt","","",null,null],[6,"MmapAdvise","","",null,null],[6,"MmapSync","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_NONE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"MAP_FAILED","","",null,null],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[11,"as_slice","","",78,null],[11,"from_slice","","",78,null],[11,"from_mut_slice","","",78,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",79,null],[12,"tv_usec","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",79,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",79,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",79,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",79,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",79,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[6,"Output","","",null,null],[11,"neg","","",79,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"add","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"sub","","",79,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"mul","","",79,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[6,"Output","","",null,null],[11,"div","","",79,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",79,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",80,null],[13,"Child","","",80,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"dup","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"fd"},{"name":"fd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"fd"},{"name":"fd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"execve","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"fd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"fd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",80,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",80,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",81,{"inputs":[{"name":"nixpath"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",81,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_errno","","",21,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",21,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",21,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",21,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"len","std::path","",82,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",82,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",83,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",83,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"FileStat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"mach_timebase_info"],[4,"c_void"],[4,"Error"],[4,"Errno"],[3,"flock"],[4,"FcntlArg"],[3,"OFlag"],[3,"FdFlag"],[3,"KEvent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[3,"IoctlDirFlags"],[3,"siginfo"],[3,"sigaction"],[3,"SockFlag"],[3,"SigSet"],[3,"SigAction"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockLevel"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[8,"SockOpt"],[3,"SockFlag"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[4,"Fork"],[8,"NixPath"],[3,"Path"],[3,"PathBuf"]]};
initSearch(searchIndex);
